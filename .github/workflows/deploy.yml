# Deploy to Server
# https://github.com/jurassicjs/nuxt3-fullstack-tutorial/blob/main/.github/workflows/deploy-int.yaml

name: Release Application Deployment

on:
  workflow_dispatch:

jobs:
  install:
    # runs-on: ubuntu-latest
    runs-on: self-hosted
    steps:
      # Извлекаем репозиторий из папки $GITHUB_WORKSPACE
      - name: Checkout Code
        uses: actions/checkout@v4

      # Устанавливаем Node.js 
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.14.0'

      # Устанавливаем зависимости
      - name: Install Dependencies
        run: npm ci

  build:
    # runs-on: ubuntu-latest
    runs-on: self-hosted
    needs: install  # Зависимость от джобы установки
    steps:
      # Извлекаем репозиторий (второй раз, чтобы иметь доступ к коду)
      - name: Checkout Code
        uses: actions/checkout@v4

      # Устанавливаем переменные из секретов репозитория
      - name: Set Environment Variables
        run: |
          echo "JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }}" >> $GITHUB_ENV
          echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" >> $GITHUB_ENV
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
          echo "JWT_ACCESS_EXPIRE=${{ secrets.JWT_ACCESS_EXPIRE }}" >> $GITHUB_ENV
          echo "JWT_REFRESH_EXPIRE=${{ secrets.JWT_REFRESH_EXPIRE }}" >> $GITHUB_ENV
          echo "JWT_ACCESS_MAX_AGE=${{ secrets.JWT_ACCESS_MAX_AGE }}" >> $GITHUB_ENV
          echo "JWT_REFRESH_MAX_AGE=${{ secrets.JWT_REFRESH_MAX_AGE }}" >> $GITHUB_ENV

      # Генерируем Prisma
      - name: Generate Prisma
        run: npx prisma generate

      # Собираем проект
      - name: Build Project
        run: npm run build

  deploy:
    # runs-on: ubuntu-latest
    runs-on: self-hosted
    needs: build  # Зависимость от джобы сборки
    steps:
      # Извлекаем репозиторий (в третий раз для доступа к собранному коду)
      - name: Checkout Code
        uses: actions/checkout@v4

      # Устанавливаем переменные из секретов репозитория
      - name: Set Environment Variables
        run: |
          echo "JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }}" >> $GITHUB_ENV
          echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" >> $GITHUB_ENV
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
          echo "JWT_ACCESS_EXPIRE=${{ secrets.JWT_ACCESS_EXPIRE }}" >> $GITHUB_ENV
          echo "JWT_REFRESH_EXPIRE=${{ secrets.JWT_REFRESH_EXPIRE }}" >> $GITHUB_ENV
          echo "JWT_ACCESS_MAX_AGE=${{ secrets.JWT_ACCESS_MAX_AGE }}" >> $GITHUB_ENV
          echo "JWT_REFRESH_MAX_AGE=${{ secrets.JWT_REFRESH_MAX_AGE }}" >> $GITHUB_ENV

      # Разворачиваем приложение
      - name: Deploy Application
        run: |
          echo "Deploying application..."


#      - name: Setup SSH key
#        run: |
#          mkdir -p ~/.ssh
#          echo "${{ secrets.PRODUCTION_SERVER_DEPLOY_KEY }}" > ~/.ssh/id_rsa_cloud || { echo "Failed to write SSH key"; exit 1; }
#          chmod 600 ~/.ssh/id_rsa_cloud
#          ssh-keyscan -H cloud.pas-gw.keenetic.pro >> ~/.ssh/known_hosts || { echo "Failed to add known hosts"; exit 1; }
#          cat ~/.ssh/known_hosts  # вывод содержимого known_hosts для отладки

#      - name: Test SSH connection
#        run: ssh -i ~/.ssh/id_rsa_cloud poe@cloud.pas-gw.keenetic.pro "echo 'SSH Connection Successful'"

#      - name: Create deploy directory
#        run: ssh -i ~/.ssh/id_rsa_cloud poe@cloud.pas-gw.keenetic.pro "mkdir -p ~/cloud_app"

#      - name: Deploy to server
#        run: |
#          rsync -r --delete --exclude=.git ./ poe@cloud.pas-gw.keenetic.pro:~/cloud_app
#          ssh -i ~/.ssh/id_rsa_cloud poe@cloud.poe-gw.keenetic.pro "cd ~/cloud_app && npm install --production && pm2 restart cloud_app"
