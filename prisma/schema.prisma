// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Таблица пользователей
model User {
  UserID            String            @id @unique                 // Уникальный идентификатор пользователя
  IsActivated       Boolean           @default(true)              // Признак активации аккаунта
  IsOnline          Boolean           @default(false)             // Признак нахождения пользователя в сети
  Role              String            @default("ADMIN")           // Уровень доступа к ресурсам
  EMail             String            @unique                     // Уникальный адрес электронной почты
  Password          String                                        // Пароль пользователя
  NickName          String            @unique                     // Псевдоним
  Avatar            String?           @default("")                // Аватар
  FirstName         String?           @default("")                // Имя
  LastName          String?           @default("")                // Фамилия
  Department        String?           @default("")                // Подразделение
  AboutMe           String?           @default("")                // Краткое описание о себе
  Country           String?           @default("")                // Страна
  Region            String?           @default("")                // Регион (штат, область...)
  City              String?           @default("")                // Город
  Address           String?           @default("")                // Адрес
  PostCode          String?           @default("")                // Почтовый индекс
  PhoneNumber       String?           @default("")                // Номер телефона
  Tags              Json                                          // Теги для привязки устройств
  AccessToken       String?           @default("")                // Токен доступа к ресурсу
  RefreshToken      String?           @default("")                // Токен для перезапроса токена доступа к ресурсу
  Created           DateTime          @default(now())             // Дата создания профиля пользователя
  Updated           DateTime          @updatedAt                  // Дата редактирования профиля пользователя

  Devices           UserDevice[]                                  // Связь с устройствами пользователя
  News              News[]            @relation                   // Связь с новостями
  Groups            Group[]           @relation("UserGroups")     // Связь с чатами
  Messages          GroupMessage[]                                // Связь с сообщениями, которые отправил пользователь
  
  @@map("Users")                                                  // Имя таблицы в базе данных
}

// Таблица новостей
model News {
  NewsID            String            @id @unique                 // Уникальный идентификатор новости
  UserID            String?                                       // Идентификатор пользователя, 
  Title             String                                        // Заголовок новости
  Brief             String                                        // Краткое описание
  Content           String                                        // Полное содержимое новости
  ImageTitle        String?                                       // Изображение для заголовка новости
  ImageContent      String?                                       // изображение в теле новости
  Published         Boolean           @default(false)             // Признак доступности новости
  Created           DateTime          @default(now())             // Дата создания новости
  Updated           DateTime          @updatedAt                  // Дата изменения новости

  Author            User?             @relation(fields: [UserID], references: [UserID], onDelete: SetNull)

  @@map("News")                                                   // Имя таблицы в базе данных
}

// Таблица устройств в каталоге
model CatalogDevice {
  Icon              String                                        // Иконка
  CatalogID         String            @id @unique @db.VarChar(4)  // Уникальный идентификатор устройства по каталогу
  CatalogName       String            @default("PAS-Module") @db.VarChar(16)  // Имя устройство по умолчанию
  LatestFW          String            @db.VarChar(5)              // Последняя версия прошивки на сервере

  Created           DateTime          @default(now())             // Дата создания устройства
  Updated           DateTime          @updatedAt                  // Дата обновления устройства

  Versions          CatalogVersion[]  @relation("CatalogVersions") // Связь с версиями прошивок
  Devices           Device[]          @relation("DeviceCatalog")

  @@map("CatalogItems")                                            // Имя таблицы в базе данных
}

// Таблица конкретной версии устройства из каталога (с описанием, прошивкой, руководством, API и мета данными)
model CatalogVersion {
  id                String            @id @default(cuid())
  DeviceID          String            @db.VarChar(4)              // Связь с устройством из каталога
  VerFW             String                                        // Версия прошивок

  Device            CatalogDevice     @relation("CatalogVersions", fields: [DeviceID], references: [CatalogID], onDelete: Cascade)
  Localizations     CatalogLocalization[] @relation("CatalogLocalization")

  @@unique([DeviceID, VerFW], name: "IDX_DeviceVersion")          // Уникальный составной ключ (идентификатор устройства + версия)
  @@index([DeviceID], name: "IDX_DeviceID")                                 
  @@map("CatalogVersions")                                        // Имя таблицы в базе данных
}

model CatalogLocalization {
  id                String            @id @default(cuid())
  VersionID         String
  Language          String            @db.VarChar(2)              // en, ru, etc
  Brief             String            @db.VarChar(255)            // Краткое описание устройства
  Description       String            @db.Text                    // Full description
  Firmware          Bytes                                         // Бинарные данные прошивки
  Manual            Bytes                                         // PDF manual
  API               Bytes                                         // API specification
  MetaData          Json                                          // Мета данные прошивки (ID устройство, версия прошивки, CRC32 прошивки)

  Version           CatalogVersion    @relation("CatalogLocalization", fields: [VersionID], references: [id], onDelete: Cascade)

  @@unique([VersionID, Language], name: "IDX_VersionLanguage")
  @@index([VersionID], name: "IDX_VersionID")
  @@map("CatalogLocalizations")
}

// Таблица реальных (физических) устройств
model Device {
  DevSN             String            @id @unique @db.VarChar(32) // Серийный номер устройства
  DevID             String            @db.VarChar(4)              // Идентификатор устройства по каталогу
  DevName           String            @db.VarChar(16)             // Имя устройства
  DevFW             String            @db.VarChar(5)              // Версия прошивки
  IsOnline          Boolean           @default(false)             // Признак нахождения устройство в сети
  Modules           Json?                                         // Список модулей в виде JSON
  
  Users             UserDevice[]                                  // Обратная связь с UserDevice
  Messages          GroupMessage[]                                // Обратная связь с GroupMessage
  Catalog           CatalogDevice     @relation("DeviceCatalog", fields: [DevID], references: [CatalogID])
  
  @@index([DevID], name: "IDX_DeviceCatalogID")
  @@map("Devices")                                                // Имя таблицы в базе данных
}

// Промежуточная таблица для связи Многие-ко-Многим между User и Device
model UserDevice {
  UserID            String                                        // Идентификатор пользователя
  DevSN             String                                        // Серийный номер устройства
  TagID             String                                        // Тег привязки

  User              User              @relation(fields: [UserID], references: [UserID], onDelete: Cascade)
  Device            Device            @relation(fields: [DevSN], references: [DevSN], onDelete: Cascade)

  @@id([UserID, DevSN])                                           // Уникальный идентификатор (составной ключ) 
  @@map("UserDevices")                                            // Имя таблицы в базе данных
}

// Таблица с группами
model Group {
  GroupID           String            @id @unique                 // Уникальный идентификатор группы
  GroupName         String            @unique                     // Уникальное имя группы

  GroupMessages     GroupMessage[]                                // Связь с сообщениями в этом чате
  Participants      User[]            @relation("UserGroups")     // Участники чата

  @@map("Groups")                                                 // Имя таблицы в базе данных
}

// Таблица сообщений
model GroupMessage {
  MessageID         String            @id @default(cuid())        // Уникальный идентификатор сообщения
  GroupID           String                                        // Идентификатор группы
  UserID            String?                                       // Идентификатор пользователя
  DevSN             String?                                       // Серийный номер устройство
  Message           String                                        // Содержимое сообщения
  Created           DateTime          @default(now())             // Дата создания сообщения

  Author            User?             @relation(fields: [UserID], references: [UserID])   // Связь с пользователем
  Device            Device?           @relation(fields: [DevSN], references: [DevSN])     // Связь с устройством
  Group             Group             @relation(fields: [GroupID], references: [GroupID]) // Связь с чатом

  @@map("GroupMessages")                                          // Имя таблицы в базе данных
}
